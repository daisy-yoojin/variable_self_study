**** React router
ref. https://www.daleseo.com/react-router-basic/
     https://velopert.com/3417

- 일반적인 routing에서 주의해야할점
    + 특정페이지에 대한 즐겨찾기 등록이 불가하다. 컴포넌트가 전환되더라도 브라우 저 주소창의 url은 고정 되어있다.
    + 뒤로가기 버튼을 누르면 해당 앱내에서 이전 페이지로 이동하는 것이 아니라 그 전에 서핑하던 다른 웹사이트로 이동해버린다.
    + 새로고침 버튼을 누르면 사용 중이던 컴포넌트가 아닌 무조건 최초에 렌더링 되었던 Home 컴포넌트로 이동한다.

- react router
    : 위의 라우팅 문제를 해결하기 위해 거의 표준처럼 사용되고 있는 네비게이션 라이브러리
    : 앱내에서 발생하는 라우팅이 location이나 history와 같은 브라우저 내장 API와 완벽하게 연동 된다.
    : SPA에서 제공하는 다이나믹 UX를 그대로 살리면서 기존 웹사이트에서 가능하던 브라우상의 smooth한 routing을 제공

- 설치
    npm i react-router-dom

- 핵심 Component

    + Link Component
    : HTML의 <a>태그와 유사한 기능을 하는 컴포넌트라고 생각.
    : <Link>컴포넌트는 to prop을 통해 이동 경로를 지정한다.
        <Link to="/about">About</Link>
    : 주고  navigation bar의 용도로 사용하게 된다.

    + Route Component
    : 현재 주소창읙 경로로 매치될 경우 보여줄 컴포넌트를 지정하는데 사용
    : path prop을 통해서 매치시킬 경로를 지정. component prop을 통해서 매치되었을 때 보여줄 component 할당
        <Route path="/about" component={About} />
    : url이 /about일때 About Component를 보여준다.
    : 일반적으로 현재 주소창의 URL 경로에 따라 특정 컨텐트를 보여주거나 숨기기 위해서 사용될 수 있다.

    + Router Component
        : Route , Link Component를 함께 유기적으로 동작하기위해 묶는데 사용.
        : Router가 공통 상위 Component이다.
            <Router>
                ...
                <Link />
                <Link />
                ...
                <Route />
                <Route />
                ...
            </Router>

    + exact prop: default path
    + <Router></Router>로 전체를 감싸준다.
    + <Route></Route> path를 component로 지정한다.
    + <Link></Link>의 경우 Link로 이동