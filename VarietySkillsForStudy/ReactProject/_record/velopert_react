#### short form for node
- when create react-app 

#### React

- 특이점
 : Only for View.;
 : 다른 프레임워크와 혼용가능

- 상태관리
 : redux or mobX
 : redux + redux-sega / redux-thunk, MobX, superagent, 

 - 작업환경
  : node / npm / yarn 설치 
  : code editor setting 
  : git
  : creat-react-app사용
    + If does not use yarn, use
        $ npm init react-app <project name>

- webpack

- serviceWorker

- render return 단위
    : <div></div>
    : v16이상 Fragment 사용 => <Fragment></Fragment>
    : or <> </>로 대체
    : import React, {Fragment} from 'react';

- ES6
    const(불변), let(동적) 사용 ( var 사용 지양 )
    -> block 단위의 범위 / scope 함수단위

- ERROR 처리
    : 어떤 값이 undefined의 경우가 발생한다면 OR 연산자를 통해 
        Nothing returned ERROR를 해결 할수 있다.
        ex)
            function App(){
                const name = undefined;
                return(
                    <div>
                        {name || '리액트']}
                    </div>
                );
            }

- inline Styling
    -문자 사용 X , camelCase로 작성 할 것.

- class type vs. function type
    class type : state 기능 및 lifecycle 기능 사용 가능, 임의 method 정의 가능

##### Props

- defaultProps
    : props를 전달 받는 component에 지정
- children
    : 해당 컴포넌트 태그 사이의 내용을 보여주는 props

    App.js 파일 Ex)
        const App = () => {
            return <MyComponent>리액트</MyComponent>
        }
    export default App;

    MyComponent.js Ex)
        const MyComponent = props =>{
            return(
                <div>
                    안녕하세요, 제 이름은 {props.name}입니다. <br />
                    children 값은 {props.children}입니다.
                </div>
            );
        };        
        export default MyComponent;

    
    결과)
        안녕하세요, 제이름은 기본 이름입니다.
        children 값은 리액트 입니다.

- 비구조화 할당 문법을 통해 props 내부 값 추출
    : 일일이 props.name, props.children을 사용하지않고
      const {name, children} = props; 
      를 선언하여 name, children 변수를 가져다 사용함으로써 짧은 코드 사용가능하다.
    : 비구조화 할당 이라 부른다. (destructing assignment)
    : propTypes -> name 값의 형태가 무조건 string으로 사용함을 설정
    : isRequired : 필수 props 검열 가능

    App.js 파일 Ex)
        const App = () => {
            return(
                <MyComponent name="React" favoriteNumber={1}>
                리액트
                </MyComponent>
            );
        }
    export default App;

    MyComponent.js Ex)
        import PropTypes from from 'prop-type';

        const MyComponent = {{ name, favoriteNumber , children}} =>{
            return(
                <div>
                    안녕하세요, 제 이름은 {name}입니다. <br />
                    children 값은 {children}입니다. <br />
                    좋아하는 숫자는 {favoriteNumber}입니다.
                </div>
            );
        };
        MyComponent.defaultProps = {
            name: '기본 이름' 
        }
        
        MyComponent.propTypes = {
            name: PropTypes.string
            favoriteNumber: PropTypes.number.isRequired
        }
        
        export default MyComponent;

- Usage of props in class type component
    MyComponent.js ver.1 Ex)

        class MyComponent extends Component{
            render(){
                const {name, favoriteNumber, children}= this.props; // 비구조화 할당
                return(
                    
                );
            }
        }
        MyComponent.defaultProps = {
            name: '기본 이름' 
        }
        
        MyComponent.propTypes = {
            name: PropTypes.string
            favoriteNumber: PropTypes.number.isRequired
        }
        
        export default MyComponent;

    MyComponent.js ver.2 Ex)
        static defaultProps = {
            name: '기본 이름' 
        }
        
        static propTypes = {
            name: PropTypes.string
            favoriteNumber: PropTypes.number.isRequired
        }
        class MyComponent extends Component{
            render(){
                const {name, favoriteNumber, children}= this.props; // 비구조화 할당
                return(
                    
                );
            }
        }

        export default MyComponent;


##### state

    : 컴포넌트 내부에서 바뀔 수 있는 값.
    : 비교) props의 경우 parent-Component가 설정하는 값. -> 부모 권한

- constructor
    constructor(props){
        super(props);
        this.state={
            name: string,
            ...
        };
    }

- this.setState 이용

- setState이후 특정 작업시,
    Ex)
        onClick={ ()=>{this.setState(
            {
                number: number+1
            },
            ()=>{
                // 특정 작업
                }
            );}
        }


- 배열 비구조화 할당

//기존
const array = [1,2];
const one = array[0];
const two = array[1];
--->
const array =[1,2];
const [one,two]=array;

- useState사용
  const [message, setMessage] = useState(초기값);

- 주의사항
 : 배열이나 객체 업데이트시 객체 사본을 생성하여 사본에 값을 업데이트 후,
 해당 상태를 setState 혹은 Setter 함수를 통해 업데이트한다.

  Ex)
    // 객체
    const object = { a: 1, b:2, c:3 };
    const nextObjext = { ...object, b:2}; // b값만 덮어쓰기

    // 배열 다루기
    const array = {
        { id: 1, value: true},
        { id: 2, value: true},
        { id: 3, value: falsez}
    }
    let nextArray = array.concat({ id: 4 }); // 새 항목 추가
    nextArray.filter(item=> item.id !==2); // id가 2인 항목 제거
    nextArray.map(item=>(item.id === 1 ? {...item, value:false} : item )); // id가 1인 항목의 value값을 false로 변경

- 사용의 목적과 이유
    : from react Dev.team, Noticed to use functional Component and Hooks will be the main way to Dev.
    : recommend to create Component with useState

##### event Handling

- 주의 사항
    : 이벤트 이름은 camelCase로 작성
        Ex) onclick -> onClick , onkeyup -> onKeyUp
    : 이벤트에 실행할 자바스크립트 코드를 전달하는 것이 아니라 , 함수 형태의 값을 전달.
    : DOM요소에만 이벤트를 설정 할 수 있다. (Component자체에 설정 X)
        DOM요소: div, button, input, form ,span ..
        <MyComponent onClick={doSomthing}> : MyComponent클릭시 doSomthing function실행이 아닌
        doSomthing이라는 요소를 props로 전달
    : 전달 받은 Event props를 Event에 전달 할 수 있다.

- 제공 Event
    : Clipboard, Composition, Keyboard, Focus, Form, Mouse, Selection,
     Touch, UI, Wheel, Media, Image, Animation, Transition ...


- method binding
    Ex) 
        constructor(props){
            this.handleChange = this.handleChange.bind(this)
        }

        handleChange(e){
            this.setState({
                message: e.target.value,
            });
        }
        render(){
            return(
                <>
                    <input name='message' value={this.state.message} onChange={this.handleChange}/>
                </>
            );
        }

    => 번거로움
    => babel transform-class-properties 문법 이용한 화살표 함수로 method def.
    Ex)
        handleChange = (e)=>{
            this.setState({
                message: e.target.value,
            });
        }
        render(){
            return(
                <>
                    <input name='message' value={this.state.message} onChange={this.handleChange}/>
                </>
            );
        }

- multi-input
    : e.target.name이용하여 각 input 구분
    Ex)
        state={
            username:'',
            message:'',
        }

        handleChange = (e)=>{
            this.setState({
                [e.target.name]: e.target.value,
            });
        }

        render(){
            return(
                <>
                    <input name='username' value={this.state.username} onChange={this.handleChange}/>
                    <input name='message' value={this.state.message} onChange={this.handleChange}/>
                </>
            );
        }

    : handleChange(객체) 안에서 key를 []로 감싸면 그 안에 넣은 referrance가 가르키는 값이 실제
    key값으로 사용된다.
    : Ex)
        const name = 'realValue' ;
        cosnt ob ={
            [name]:'value'
        }
     
     Result)
        {
            'realValue' : 'value'
        }


##### naming ref: DOM 
    
    : id사용 지양.
    : 여러개의 DOM사용가능과 여러 프레임워크 혹은 라이브러리내 사용에서 naming 중복 error 방지


    ※ DOM을 반드시 직접적으로 건드려야 할 때 사용할 것. ※ ONLY FOR DOM

    ref. ValidateSample.js

    : 반드시 DOM을 사용해야하는 상황
        - 특정 input에 포커스
        - 스크롤 박스 조작하기
        - canvas요소에 그림그리기 등
        => ref 사용
- ref
    1. call-back func이용 : 전달하고자 하는 함수를 props로 전달
        <input ref={(ref)=>{this.input = ref}}/>
    2. 리액트 내장 함수 이용 : createRef

※ data 교류는 only parent-childrenm ※


##### Component 반복

    # arr.map(callback, [thisArg])
        * callback: 새로운 배열의 요소를 생성하는 함수
            - currentValue: 현재 처리하고있는 요소
            - index: 현재 처리하고 있는 요소의 index 값
            - array: 현재처리하고 있는 원본 배열

        * thisArg(선택): callback 함수 내부에서 사용할 this 레퍼런스
    
    # map()은 새로운 배열을 만드는 역할을 한다.
        Ex)
            var numbers = [1,2,3,4,5]
            var proceed = numbers.map(function(num){
                return num*num;
            });

        Ex ES6 ver.)
            cosnt numbers = [1,2,3,4,5]
            const result = numbers.map(num => num*num);
    ---> 여기까지로도 작동은 하지만 console ERROR 확인 가능.
    ---> why? "key" prop이 없음.

    # key: component 배열 렌더링시 어떤 우너소에 변동이있었는지를 빠르게 알아낼 수 있다.
    # key 값은 언제나 유일해야한다.
    # key로 사용될 특정 값이 없을땐, index를 key로 사용한다.
        ※ index 사용시 주의사항※
        - 리렌더링에 효율성이 떨어질 수 있음 
        - 고유값이 있다면 무조건 고유값으로 key를 사용할 것.

    Ex) 
        const articleList = articles.map(article => 
            <Article
                title={article.title}
                writer={article.writer}
                key = {article.id}
            />
        );

    Ex - with index )
        const IterationSample = ()=>{
            const names = ['가','나','다','라'];
            const nameList = names.map( (name, index)=> <li key ={index}>{name}</li>);
            return <div>{nameList}</div>;
        };


##### Component 반복
    마운트 / 업데이트 / 언마운트 의 큰 구조
    
    1. 마운트
        constructor
        getDerivedStateFromProps
        render
        componentDidMount

    2.업데이트 :
        - props가 바뀔때
        - state가 바뀔때
        - 부모 컴포넌트가 re-rendering될때
        - this.forceUpdate로 강제로 re-rendering trigger할때
        getDerivedStateFromProps
        shouldComponentUpdate
        render
        getSnapshotBeforeUpdate
        componentDidUpdate
    
    3.언마운트
        componentWillUnmount
        componentDidCatch : error catch





- If
 : {}를 이용한 삼항연산자 이용