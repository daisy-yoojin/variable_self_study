
* class type vs function type
    - class type
        ->  render 함수 필요 + jsx 리턴필요. (html code)  
    -차이점
        -> state와 LifeCycle이 빠져있다.
        -> 컴포넌트 초기 마운트가 아주 미세하게 빠르고, 메모리 자원을 덜 사용한다. 매우 미세하여 성능적으로 큰 차이는없다.

* props & state
    - props : 
        + 부모 컴포넌트가 자식컴포넌트에게 주는 값
        + 자식 컴포넌트에서는 props를 방아오기만하고, 받아온 props를 직접 수정 할 수 없다.
        + defaultProps:
            props의 기본값 설정

    - state:
        + 컴포넌트 내부에서 선언하며 내부에서 값을 변경할수 있다.
        + 설정 방법:
            state={
                number:0 
            }
            constructor(props){
                super(props);
                state = {
                    number: 1;
                }
            }
        + class fields 가 먼저 실행되고, 그 다음에 constructor 에서 설정된 것이 나온다.
        + this.setState
            - state에 있는 값을 바꾸기 위해서 무조건 거쳐야하는 단계
            - 컴포넌트가 re-rendering되도록 설계되어있다.
            - 객체의 깊은 곳까지 확인하지 못한다.
        + setState에 객체 아닌 함수 전달 (more better)
            this.setState({
                number: this.state.number + 1
            });

            =>

            this.setState(
                (state) => ({
                    number: state.number
                })
            );
        + Array 설정시 주의 필요. 하위 Array내용 참고

* method
    - 작석방법:
        1)
        handleIncrease = () => {
            this.setState({
                number: this.state.number + 1
            });
        }
        2) *함수만 작성시 click event에서 this가 undefined로 나타나서 제댛로 처리되지않게 된다. click event과정에서 "this"와 연결이 끊겨버리기 떄문.
        handleIncrease() {
            this.setState({
                number: this.state.number + 1
            });
        }
        * constructor에서 아래와 같이 선언하여 연결하거나 1)같이 작성한다.
        constructor(props) {
            super(props);
            this.handleIncrease = this.handleIncrease.bind(this);
        } 


* event function 주의
    - 이벤트이름 설정시 camelCase로 설정해줘야한다. (ex. onclick -> onClick , onmousedown -> onMouseDown, onchange -> onChange)
    - 이벤트에 전달해주는 값은 함수여야한다. onClick={this.handleIncrease()}이런식으로 하게된다면 렌더시 마다 해당 함수 호출
        (렌더링 -> 함수 호출 -> setState -> 렌더링 -> 함수 호출 -> 무한반복...) 꼭! 메소드 호출하지 말것

* react lifeCycle
# Component 초기 생성
    - component가 새로 만들어질때마다 함수 호출
        + constructor 
            : 컴포넌트가 새로 만들어질 때마다 이 함수가 호출

    - browser가 나타나기 전 호출 api
        + componentWillMount
            : 컴포넌트가 화면에 나가나기 직전에 호출
            : 주로 브라우저가 아닌 환경에서 (서버사이드)도 호출하는 용도로 사용
            : ※ 리액트 v16.3 에서는 해당 API 가 deprecated,※ v16.3 이후부터는 UNSAFE_componentWillMount() 라는 이름으로 사용.
            : constructor 와 componentDidMount 에서 충분히 처리 할 수 있습니다.

    - 컴포넌트가 화면에 나타나게 됐을 때 호출
        + componentDidMount
            : 외부 라이브러리 연동: D3, masonry, etc
            : 컴포넌트에서 필요한 데이터 요청: Ajax, GraphQL, etc
            : DOM 에 관련된 작업: 스크롤 설정, 크기 읽어오기 등

# Component 업데이트 : 컴포넌트가 업데이트는 props 의 변화, 그리고 state 의 변화에 따라 결정
    - 컴포넌트가 새로운 props 를 받게됐을 때 호출
        + componentWillReceiveProps
            : 주로, state 가 props 에 따라 변해야 하는 로직을 작성
            : this.props 는 아직 바뀌지 않은 상태
            : 새로 받게될 props 는 nextProps 로 조회 할 수 있으며, 이 때 this.props 를 조회하면 업데이트 되기 전의 API 
            : ※해당 API 가 deprecated,※ UNSAFE_componentWillReceiveProps() 라는 이름으로 사용
            : 상황에 따라 새로운 API getDerivedStateFromProps 로 대체 될 수도 있음.

    - props 로 받아온 값을 state 로 동기화 하는 작업을 해줘야 하는 경우에 사용
        + [NEW] static getDerivedStateFromProps()
            static getDerivedStateFromProps(nextProps, prevState) {
                // 여기서는 setState 를 하는 것이 아니라
                // 특정 props 가 바뀔 때 설정하고 설정하고 싶은 state 값을 리턴하는 형태로
                // 사용됩니다.
                /*
                if (nextProps.value !== prevState.value) {
                    return { value: nextProps.value };
                }
                return null; // null 을 리턴하면 따로 업데이트 할 것은 없다라는 의미
                */
            }
        
        + shouldComponentUpdate
            shouldComponentUpdate(nextProps, nextState) {
                // return false 하면 업데이트를 안함
                // return this.props.checked !== nextProps.checked
                return true;
            }
            : 컴포넌트를 최적화하는 작업에서 매우 유용하게 사용
            : 쓸대없이 낭비되고 있는 이 CPU 처리량을 줄여주기 위해서 Virtual DOM 에 리렌더링 하는것도,불필요할경우엔 방지하기 위해 사용
            : 기본적으로 true 반환. 조건에 따라 false를 반환하면 해당 조건에는 render함수 호출하지 않는다.
        
    - 이 함수 호출 후, render() 호출.
        + componentWillUpdate
            componentWillUpdate(nextProps, nextState) { }
            : true를 반환했을때만 호출 된다. 만일, false룰 반환했다면 호출 되지 않는다. 
            : 주로 애니메이션 효과 초기화, 이벤트 리스너 없애는 작업을한다.
            : ※ v16.3 이후 deprecate ※ 기존의 기능은 getSnapshotBeforeUpdate 로 '대체' 될 수 있다.
        
    - 발생 시점 1. render() -> 2. getSnapshotBeforeUpdate -> 3. 실제 DOM에서 변화 발생 -> 3. componentDidMount
        + [NEW] getSnapshotBeforeUpdate()
             getSnapshotBeforeUpdate(prevProps, prevState) {
                // DOM 업데이트가 일어나기 직전의 시점입니다.
                // 새 데이터가 상단에 추가되어도 스크롤바를 유지해보겠습니다.
                // scrollHeight 는 전 후를 비교해서 스크롤 위치를 설정하기 위함이고,
                // scrollTop 은, 이 기능이 크롬에 이미 구현이 되어있는데, 
                // 이미 구현이 되어있다면 처리하지 않도록 하기 위함입니다.
                if (prevState.array !== this.state.array) {
                    const {
                        scrollTop, scrollHeight
                    } = this.list;

                    // 여기서 반환 하는 값은 componentDidMount 에서 snapshot 값으로 받아올 수 있습니다.
                    return {
                        scrollTop, scrollHeight
                    };
                }
            }

            componentDidUpdate(prevProps, prevState, snapshot) {
                if (snapshot) {
                    const { scrollTop } = this.list;
                    if (scrollTop !== snapshot.scrollTop) return; // 기능이 이미 구현되어있다면 처리하지 않습니다.
                    const diff = this.list.scrollHeight - snapshot.scrollHeight;
                    this.list.scrollTop += diff;
                }
            }

    -  render() 를 호출하고난 다음에 발생
        + componentDidUpdate(prevProps, prevState, snapshot){ }
            : this.props와 this.state가 바뀐 상태
            : parameter 이용하여 prevProps와 prevState를 조회 할 수 있다.
            : getSnapshotBeforeUpdate 에서 반환한 snapshot 값은 세번째 값으로 받아옴

# Component 제거: component가 더 이상 필요하지 않게 되면 호출
        + componentWillUnMount 
            componentWillUnMount(){
                //이벤트, setTimeout, 외부 라이브러리 인스턴스 제거
            }
            : 외부 라이브러리를 사용한게 있고 해당 라이브러리에 dispose 기능이 있다면 여기서 호출
                ex) setTimeout -> clearTimeout사용

# Component 에러발생: render함수에서 에러가 발생한다면, 리액트 앱이 crash됨. 
    - render에 표기하면 됨
        * componentDidCatch
            componentDidCatch(error, info) {
                this.setState({
                    error: true
                });
            }
            : state.error를 true로 설정하고 render함수쪽에 띄워주면 됨
            : 주의할점
                - 컴포넌트 자신의 render함수에서 에러가 발생해버리는 것은ㅇ 잡아낼 수 없지만, 자식컴포넌트 내부에서 발생하는 에러들을 잡을 수 있다.
            : 렌더링부분에서 오류가 발생하는 이유
                - 존재하지 않는 함수를 호출하려고 할때 (예를들어 props로 받을줄 알았던 함수가 전달되지 않았을때)
                - 배열이나 객체가 올줄 알았는데, 해당 객체나 배열이 존재하지 않을때
            :해결방법
                - render() 조건추가
                    render() {
                        if (!this.props.object || !this.props.array || this.props.array.length ===0) return null;
                        // object 나 array 를 사용하는 코드
                    }
                - 컴포넌트의 기본값을 설정하는 defaultProps를 통해서 설정
                    class Sample extends Component {
                        static defaultProps = {
                            onIncrement: () => console.warn('onIncrement is not defined'),
                            object: {},
                            array: []
                        }
                    }
                - 이외는 componentDidCatch를 통해서 잡아주고 나머지 내용응 서버쪽에 기록하게 한다.

* input 
    # multiple input    
        - name 속성을 이용한다. => event.target.name으로 조회가 가능하다.

* Computed property names
    : start from ECMAS 2015 the object initiallizer syntax also support Computed property names. This allows ro put an expression in brackets [].
    this will be computed and used as the property name.
    ref. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names

* Array in React
    + state내부의 값를 직접적으로 수정하면 절대로 안된다. 
        : js) this.state.array.push('some value'); ( React X )
        : 불변성 유지 위반
        : push, slice, unshift, pop 내장함수는 부적합한 사용이다. (배열자체를 직접 수정하게 됨으로)
    => 새 배열을 만들어내는 concat, slice, map, filter같은 함수를 사용해야한다.
    => 불변성 유지는 React에서 모든것들이 필요한 상황에 re-rendering되도록 설계가 가능하다. 
    => 후, 성능 최적화가 가능하기 때문이다.

### 데이터 추가
-> example : concat이용

### 데이터 렌더링
    - map  
    : callback함수를 각각의 요소에 대해 한번씩 순서대로 불러 그 함수의 반환값으로 새로운 배열 생성
    : callback함수의 경우 undefined를 포함해서 배열 값이 들어있는 인덱스에 대해서만 호출된다.
        즉, 값이 삭제되거나 아직 할당/정의되지 않은 인덱스에 대해서는 호출되지 않는다.
    : callback 함수는 호출될 때 대항 요소의 값, 요소의 인덱스, map을 호출한 원본배열의 인수를 전달 받는다.
    : thisArg(매개변수) -> callback this로 사용.
    : 호출한 배열의 값을 변형하지않는다. 단, callback 함수에 의해서 변형될 수는 있다.
    : 처리 요소의 번위는 첫 callback을 호출하기 전에 정해진다. 이후의 요소는 호출하지않는다.
    : arr.map(callback(currentValue[, index[, array]])[, thisArg])
        currentValue - 처리할 현재 요소
        index (optional) - 처리할 현재 요소의 인덱스
        array (optional) - map()을 호출할 배열
        thisArg (optional) - callback을 실행할 때 this로 사용되는 값
    : return value
        배열의 각 요소에 대해 실행한 callback의 결과를 모은 새로운 배열.
    : ref. https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map
    : .map() 사용시, 기존 array영향 없음.
    : map을 활용해 배열 속 객체를 재구성하기
        var kvArray = [{key:1, value:10},
                {key:2, value:20},
                {key:3, value: 30}];
        var reformattedArray = kvArray.map{function(obj){
            var rObj={};
            rObj[obj.key] = obj.value;
            return rObj;
        }}; //reformattedArray는 [{1:10}, {2:20}, {3:30}] , kvArray유지
    : 

### 데이터 제거
    - slice + concat
    - 배열 전개 연산자 이용
    - .filter()사용

### 데이터 수정 
    const modifiedArray = array.map(item => item.id === 1
        ? ({ ...item,. text: 'Korea' }) // id 가 일치하면 새 객체를 만들고, 기존의 내용을 집어넣고 원하는 값 덮어쓰기
        : item // 바꿀 필요 없는것들은 그냥 기존 값 사용
    - 여러 함수 및 method를 이용하는 부분을 잘 생각해보아야 할 것.

### 데이터 필터링 구현
https://velopert.com/3640