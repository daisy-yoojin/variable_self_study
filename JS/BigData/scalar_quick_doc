  Quick_doc
* Scalar
    상수, 값을 다 object로 취급한다.
    매개변수가 하나 일 때, 괄호와 .을 생략 할 수 있다.

* var vs. val
    - var: 변수
        한번에 선언하면서 대입가능
        var a,b,c = 5
        ==> a==5 | b == 5 | c == 5
    - val: 상수

*출력
    println
        - println("스트링" + x +"문자열"+y)
        - 문자열 앞에 s를 쓰면 $를 쓰고 변수이름을 바로 쓸 수 있습니다.
            println(s" $x 문자열이랑 한번에 작성하기 $y")
        - 수식을 입력하고 싶으면 ${ }사이에 식을 넣으면 됩니다.
            println(s"$x + $y = ${ x + y }")
    printf
        - java.lang.*은 자동으로 import됩니다.
        - java.lang.Math도 포함입니다.
            printf("Pi is %f",Math.PI)

* Range, List
    Range
        - to를 이용하면 1부터 10을 포함하는 Range생성
            val range1 = 1 to 10
        - until을 이용하면 마지막 숫자를 포함하지 않는 Range를 생성
            val range2 = 1 until 10
        - by를 이용하면 숫자를 건너 띄는 Range를 생성
            val range3 = 1 until 10 by 3
    List
        - range값 .toList통해서 확인 가능
        - toList를 통해 List로 변환
        - .filter(조건) : 조건에 맞는것만 모으기
        - .map(조건) : 각 아이템의 값을 변경하기

* method about numbers
    val num = -5
    num.abs // 5
    num.max(7) // num과 7사이 max 값
    num.min(7) // num과 7사이 min 값

* 문자열
    .reverse // 뒤집기
    .capitalize // 첫글자 대문자
    "문자열" * N // 문자열 N번 반복
    .toInt // 정수로 변환

* method
    - 리턴값이 있는 메소드를 정의하는 경우 method 정의하는 블록 {  }전에 =을 적어야한다.
        def add(x:Int, y:Int):Int = {
            return x + y        
        }
    - 리턴 키워드는 옵션 => 적지 않으면 리턴 타입은 리턴값에 의해 결정
        def addWithoutReturn(x:Int, y:Int) = { 
            x + y
        }
    - 메소드 내용이 1줄일 경우 중괄호 생략 가능
        def addWithoutBlock(x:Int, y:Int) = x + y

* anonymous function
    object LearnScala {
    
        // 매개변수로 받은 익명함수에 1과 2를 넣어서 실행하는 메소드
        def doWithOneAndTwo(f: (Int, Int) => Int) = {  
            f(1, 2) //return은 생략되었지만, f(1, 2)의 결과가 return
        }
    
        def main(args: Array[String]): Unit = {
            // ① 명시적으로 타입을 선언하는 익명함수
            val call1 = doWithOneAndTwo((x: Int, y: Int) => x + y)
        
            // ② 코드4번째 줄에서 익명함수의 매개변수 타입(Int, Int)을 이미 정했기 때문에 생략
            val call2 = doWithOneAndTwo((x, y) => x + y)  
        
            // ③ 이렇게 요약할 수도 있음
            val call3 = doWithOneAndTwo(_ + _) // 매개변수의 순서대로 _에 대입됨
        
            println(call1, call2, call3) // (3,3,3)
        }  
    }

* tuple
    val t1 = new Tuple3(1, "hello", true) // Tuple1 ~ Tuple22까지 존재
    val t2 = (1, "hello", true)

    - tuple값 접금
        var numbers = (1,2,3,4) 
        val sum = numbers._1 + numbers._2 + numbers._3 + numbers._4
    
    -값 반환
        ~ 여러개를 한번에 리턴 할 수 있다.
        
            object LearnScala {
                def swap(x:String, y:String) = (y, x)  
        
                def main(args: Array[String]): Unit = {
                    val (a,b) = swap("hello","world")
                    println(a, b)
                }
            }
        ~ 한번에 여러개의 변수에 값을 넣을 수 있다.
            var (x, y, z, c, python, java) = (1, 2, 3, true, false, "no!")

* while, for
    - ++ , -- 제공 안함
    - while문
        var i, sum = 0  
        while ( i < 10) {  
            sum += i  
            i+=1 
        }
        
    - for문
        for ( i <- 0 until 10) {  
            sum += i  
        }  
        
    - 가장 스칼라스럽게 합을 구하는 방법
        sum = (0 until 10).sum  
    
    -중첩 for문
        여러개의 range를 세미콜론으로 구분해서 적어주는것.
        for( a <- 1 to 3; b <- 10 to 12){
            println(a,b)
        }

* if
    - Java, C와 거의 같다
        ~ 한줄은 {} 생략 가능
        ~ 여러줄은 {} 필요
        ~ 삼항연산자
            val likeEggs = false
            val breakfast = if (likeEggs) "계란후라이" else "사과"
            // 아침으로 사과를 먹어요

* Array
    - int[] == Array[Int]
    - mutable하다 => 사이즈 변경이 아닌 들어있는 값을 변경 할 수 있다.
    - 배열 출력
        .mkString(",")이용
    - Array[Int]
        val array1 = Array(1, 2, 3)
    - Array[Any]
        val array2 = Array("a", 2, true)
    - 배열값 읽고 쓰기
        array1(0) = 4
        printArray(array1)

    - 배열 + 배열 
        ~ ++ 연산자 이용
    - 값 + 배열
        ~ 값 +: 배열 
    - 배열 + 값
        ~ 배열 :+ 값

    - index찾기
        array.indecOf("값")
    - 다른 값만 가져오기
        val diffArray = Array(1,2,3,4).diff(Array(2,3))
        printArray(diffArray) // Array(1, 4)
    - Find 메소드를 이용해서 findByName이라는 메소드 생성
        // Find는 조건에 맞는 값을 찾으면 검색을 중단
        // getOrElse는 일치하는 값이 없을 경우 넘겨줄 기본 값
        // getOrElse가 없을때 일치하는 값이 없으면 None
        def findByName(name:String) = personArray.find(_._1 == name).getOrElse(("화사",4))
        val findSolar = findByName("솔라")  // 값("솔라",1)을 찾아서 넘겨줌
        val findSun = findByName("태양")  // 값이 없으므로 getOrElse에 있는 값("화사",4)이 

* List
    - scala.collection.immutable.List 이므로 값을 변경할 수 없는 속성을 가지고 있다.
        -> 변경사항을 반영한 새로운 리스트를 만들어내는 방식으로 동작

        // List[Any](기본 리스트를 사용하므로 Immutable) 
        val list = List("a", 1, true)
        
        // 값을 읽어올 수는 있지만 값을 변경 할 수는 없음
        val firstItem = list(0)
    
    - 연산
        ~ sum
        // 앞에 붙이기는 :: 또는 +: 연산자
        // 리스트 두개를 붙이기는 ++ 또는 :::연산자
        // 뒤에 붙이기는 :+연산자(immutable list에서 효율적인 방법이 아님)
        val concatenated = 0 :: list ++ list :+ 1000 // List(0, a, 1, true, a, 1, true, 1000)

        ~ Diff
        val diffList = List(1,2,3,4) diff List(2,3) // List(1, 4)

    - Find : 배열의 Find와 같은 방식으로 동작
        val personList = List(("솔라",1), ("문별",2), ("휘인",3))
        def findByName(name:String) = personList.find(_._1 == name).getOrElse(("화사",4))
        val findSolar = findByName("솔라")  //(솔라,1)

        def findByValue(value:Int) = personList.find(_._2 == value).getOrElse(("화사",4))
        val findSolar1 = findByValue(1) 
        println(s"④ ${findSolar1}")     //④ (솔라,1)

* Set
    - Set은 Predef.Set
    - 크기 ~4까지는 별도의 클래스 존재 Set1, Set2, Set3, Set4
    - 4초과된 크기는 HashSet으로 구현
    - 같은 값을 추가하면 기존 값을 덮어쓴다 (값 중복 없음)
    - 순서 없음

     val set1 = Set("one", 1)       // ("one",1)
     val set2 = Set(1,2,2,2,3,3,3)  // (1,2,3)
    - 값 존재 여부: 괄호 안에 값을 넣어서 사용
        val oneExists = set2(1)  
        val fourExists = set2(4)
    
    - set ++ set : 중복된 내용 제거된 새로운 Set 생성
        val concat = set1 ++ set2

    - diff
        val diffSet = Set(1,2,3,4) diff Set(2,3)

    - Find
        set.find()
            find는 조건에 맞는 값을 찾으면 검색을 중단
            getOrElse는 일치하는 값이 없을 경우 넘겨줄 기본 값
            getOrElse가 없을때 일치하는 값이 없으면 None

        val personSet = Set(("솔라",1), ("문별",2), ("휘인",3))  
        def findByName(name:String) = personSet.find(_._1 == name).getOrElse(("화사",4))  
        val findSolar = findByName("솔라")    // 값("솔라",1)을 찾아서 넘겨줌

* Map
    - Map(key1 -> value1, key2 -> value2, ...)
    - Predef.Map(scala.collection.immutable.Map)
    - 크기 ~4까지는 별도의 클래스 존재 Map1, Map2, Map3, Map4
    - 4초과된 크기는 HashMap으로 구현

    - Map[String, Int] 타입의 맵 
        val map1 = Map("one" -> 1, "two" -> 2, "three" -> 3)   
    - Map[Any, Any] 타입의 맵
        val map2 = Map(1 -> "one", "2" -> 2.0, "three" -> false)   
    - 중복된 키가 있으면 마지막 값을 사용
        println(s"${Map('a' -> 1, 'a' -> 2)}")    // Map(a ->2)
    - key를 가지고 값을 읽어오기
        val one = map1("one")  // 1

    - 키가 없으면 NoSuchElementException이 발생
    - get메소드를 이용해서 얻어오는 객체의 isDefine값으로 Key가 있는지 확인 가능
        val fourExistsOption = map1.get("four")
        println(s"${fourExistsOption}")               // None
        println(s"${fourExistsOption.isDefined}")     // false
    
    - 연산
        ~ 더하기 : ++ 
            map1 ++ map2
        ~ 중복된 키("three")의 값은 마지막 값으로 결정
    
    - find 
        ~ List, Set과 같은 형태
            val personMap = Map(("솔라",1), ("문별",2), ("휘인",3))  
            def findByName(name:String) = personMap.getOrElse(name, 4)  
            val findSolar = findByName("솔라")  // 1

* 상속
    -  공통으로 상속받는 타입 중 최상위 타입으로 결정
        class Animal()
        class Dog() extends Animal()

        //Animal과 Dog이 공통으로 상속받는 최상위 타입은 Animal이므로 아래 코드는 정상 실행
        val array:Array[Animal] = Array(new Animal(), new Dog())
        // val wrongArray:Array[Dog] = Array(new Animal(), new Dog()) 올바르지 않은 타입
        
        // List도 같은 원리로 동작(Animal이 List의 element의 타입)
        val list:List[Animal] = List(new Animal(), new Dog())
        
        // Set도 같은 원리로 동작(Animal이 Set의 element의 타입)
        val set:Set[Animal] = Set(new Animal(), new Dog())
        
        // Map도 같은 원리로 동작
        val map:Map[String, Animal] = Map("Animal" -> new Animal(), "Dog" -> new Dog())

* Mutable Collection
    - 변경 가능 --> 꼭 필요한 경우 사용
    - immutable Collection 권장 --> 기본 Collection
    - ArrayBuffer는 자바에서 배열로 구현되는 java.util.ArrayList와 유사
    - mutable Collection을 사용할 때는 앞에 mutable을 붙여 사용
        ~ mutable.ArrayBuffer, mutable.ListBuffer, mutable.Set, mutable.Map
    
    - 배열로 구현되는 ArrayBuffer
        val arrayBuffer = mutable.ArrayBuffer(1, 2, 3)   
        arrayBuffer += 4                // ① ArrayBuffer(1, 2, 3, 4)
        arrayBuffer -= 1                // ① ArrayBuffer(2, 3, 4)
        arrayBuffer ++= List(5, 6, 7)   // ① ArrayBuffer(2, 3, 4, 5, 6, 7)
    - Linked list로 구현되는 ListBuffer
        val listBuffer = mutable.ListBuffer("a", "b", "c") // ② ListBuffer(a, b, c)
    - Mutable Set
        val hashSet = mutable.Set(0.1, 0.2, 0.3)  
        hashSet ++= mutable.Set(5)      // ③ Set(0.3, 5.0, 0.2, 0.1)    
    - Mutable Map
        val hashMap = mutable.Map("one" -> 1, "two" -> 2)  
        hashMap ++= Map("five" -> 5, "six" -> 6)    // ④ Map(one -> 1, six -> 6, five -> 5, two -> 2)

* Immutable Collection
    - var로 선언된 경우 Collection의 += , -+연산자 사용 가능.
        변경사항을 새로 반영하여 var선언 변수에 저장한다.

        // ① 변경할 수 없는 Collection이 var로 선언된 경우
        var immutableSet = Set(1, 2, 3)   
        immutableSet += 4  
        // 위의 코드는 새로운 Set을 만들어서 immutableSet에 저장하는 아래 코드와 같음
        immutableSet = immutableSet + 4  

        // ② 변경할 수 있는 Collection이라면 추가하는 Method를 호출하는것과 같음
        val mutableSet = mutable.Set(1, 2, 3)    
        mutableSet += 4        
        // 위의 코드는 mutableSet 자체의 메소드(+=이라는 메소드)를 호출하는 아래 코드와 같음
        mutableSet.+=(4)  

* class
    - 클래스를 선언하는 부분이 기본 생성장의 역할도 함

    - 선언 방법
        // ① 단순한 클래스
        class Person1(fname:String, lname:String)
        // ② 메소드를 가지는 클래스
        //   메소드를 정의하는 방법
        class Person2(fname:String, lname:String){  
            def greet = s"${lname}${fname}님 안녕하세요!" // public한 method
        }
        // ③ public한 val(read only) 필드   
        //   필드를 선언하는 방법
        class Person3(fname:String, lname:String){  
            val fullName = s"${lname}${fname}" // public한 val(read only) 필드
            def greet = s"${fullName}님 안녕하세요!" // public한 method
        }
        /* ④ val로 선언하면 해당 이름을 가지는 변수(private)와 public getter메소드를 생성
         * val로 선언된 fname는 getter가 자동으로 생성되고
         * var로 선언된 lname은 getter와 setter가 자동으로 생성 */
        class Person4(val fname:String, var lname:String)

    - 스칼라에서는 명시적으로 정의되지 않으면 모두 public으로 간주
    - getter와 setter를 사용하기 위해서는 private 변수의 이름은 다르게 지정
        메소드명과 구분하기 위해 _를 변수명 앞에 붙이기도 함